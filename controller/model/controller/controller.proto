syntax = "proto3";

package controller;

enum RxModeType {
    RX_MODE_UNKNOWN = 0;
    RX_MODE_POLLING = 1;
    RX_MODE_INTERRUPT = 2;
}

message SystemParameters {
    uint32 mtu = 1; // optional, overrrides default 1500
    uint32 starting_vlan_id = 2; // optional, overrrides default 5000
};

enum ExtEntDriverType {
    EE_DRIVER_TYPE_UNKNOWN = 0;
    EE_DRIVER_TYPE_IOSXE_SSH = 1;
}
message ExternalEntity {
    string name = 1;
    string mgmnt_ip_address = 2;
    uint32 mgmnt_port = 3;
    string basic_auth_user = 4;
    string basic_auth_passwd = 5;
    ExtEntDriverType ee_driver_type = 6;

    message HostInterface {
        string if_name = 1;
        string ipv4_addr = 2;
    }
    HostInterface host_interface = 7;

    message HostVxlan {
        string if_name = 1;
        string source_ipv4 = 2;
    }
    HostVxlan host_vxlan = 8;

    message HostBD {
        uint32 id = 1;
        string bdi_ipv4 = 2;
        repeated string interfaces = 3;
    }
    HostBD host_bd = 9;
};

message HostEntity {
    string name = 1;
    string eth_if_name = 2;
    string eth_ipv4 = 3;
    string loopback_mac_addr = 4;
    string loopback_ipv4 = 5;
    uint32 mtu = 6;                   // if provided, this overrides system value
    RxModeType rx_mode = 7;
};

enum EWBridgeType {
    EW_SYSTEM_DEFAULT_BRIDGE = 0;
    EW_L2FIB_BRIDGE = 1;   // forwarding on ONLY, need l2fib entries
    EW_DYNAMIC_BRIDGE = 2; // learning, flooding and forwarding
};

enum SfcType {
    SFC_UNKNOWN_TYPE = 0;

    SFC_NS_VXLAN = 1;        // VXLAN-based north-south SFC

    SFC_NS_NIC_BD = 3;       // physial NIC-based north-south SFC - bridge domain -based
    SFC_NS_NIC_L2XCONN = 4;  // physial NIC-based north-south SFC - l2xconnect -based

    SFC_EW_BD = 2;           // bridge domain-based east-west SFC dynamcic bridge
    SFC_EW_L2XCONN = 5;      // l2xconnect -based east-west SFC
    SFC_EW_BD_L2FIB = 8;     // bridge domain-based east-west SFC static l2fib bridge


    SFC_EW_MEMIF = 6;        // each container pair is wired via memif's
    SFC_EW_VETH = 7;         // each container pair is wired via veths's
};

enum SfcElementType {
    ELEMENT_UNKNOWN = 0;
    EXTERNAL_ENTITY = 1;
    VPP_CONTAINER_MEMIF = 2;
    NON_VPP_CONTAINER_AFP = 3;
    NON_VPP_CONTAINER_MEMIF = 4;

    HOST_ENTITY = 5;
    VPP_CONTAINER_AFP = 6;
};

message CustomInfoType {
    string label = 1;
}

message SfcEntity {
    string name = 1;
    string description = 2;
    SfcType type = 3;
    string sfc_ipv4_prefix = 4;     // optional field allowing east-west ifs to use a prefix eg 10.1.2.0/24
    uint32 vnf_repeat_count = 5;    // hack for perf testing, if > 0, more vnfs are inserted into chain
    EWBridgeType ew_bridge_type = 6;
    message SfcElement {
        string container = 1;
        string port_label = 2;
        string etcd_vpp_switch_key = 3;   // static for now, k8s will tell us on which host this container is deployed
        repeated string ip_addresses = 4; // optional, if provided, one or more addresses allowed, format x.x.x.x/y
        string mac_addr = 5;              // optional, if provided, this overrides what mac this i/f is given
        SfcElementType type = 6;
        uint32 vlan_id = 7;               // optional, if provided, this overrides what vlanID this i/f is given
        uint32 mtu = 8;                   // if provided, this overrides system value
        RxModeType rx_mode = 9;
        repeated string l2fib_macs = 10;
        string host_port_label = 11;
    };
    repeated SfcElement elements = 7;
};
